#!/usr/bin/perl
use strict;
use warnings;
use Curses;
use Time::HiRes qw(usleep);
use Data::Dumper;


# needed variables

my ($bm, $d, $o);         # board-matrix reference, deck-ref, comp-deck
my ($bm_w, $d_w, $o_w);   # board window reference, deck window ref, comp window ref
my $c;              # card reference 
my $cardfile = "./tt_cards.txt";
my @score = (5, 5); # keep score .. obviously ...

my %co_b = ( # coords for the windows in the board
        '1,1' => [1, 22],  '1,2' => [1, 32],  '1,3' => [1, 42], 
        '2,1' => [8, 22],  '2,2' => [8, 32],  '2,3' => [8, 42], 
        '3,1' => [15, 22], '3,2' => [15, 32], '3,3' => [15, 42] 
);
my %co_d = ( # coords to human deck
    '1' => [1, 53], '2' => [8, 53], '3' => [15, 53], '4' => [1, 63], '5' => [8, 63] 
);

my %co_o = ( # coords to computer deck
    '1' => [1, 1], '2' => [8, 1], '3' => [15, 1], '4' => [1, 11], '5' => [8, 11] 
);



# read in cards from cardfile

open my $CF, "< $cardfile" or die "can't open cardfile!";
while (my $l = <$CF>) {
    next if $l =~ m/^#.*/ || $l =~ m/^ *$/;  # skip empty lines and comments
    if ($l =~ m/^([a-zA-Z0-9 \-\&]+)\[?(\w+)?\]?\/(\d|A?):(\d|A?):(\d|A?):(\d|A?)$/) {
        $c->{$1}{'elem'} = $2; 
        ($c->{$1}{'t'}, $c->{$1}{'b'}, $c->{$1}{'l'}, $c->{$1}{'r'}) = ($3, $4, $5, $6);
    }   
}
close $CF;

# START OF FUNCTIONS
# ................................................


# function: get_neighbours
# needs coords as 2 params, returns a list of tupels of all neighbours
# ................................................
sub get_neighbours {
    my ($X, $Y) = @_;
    my @res;
    my @checks = ([$X, $Y+1], [$X, $Y-1], [$X-1, $Y], [$X+1, $Y]);
    for my $c (@checks) {
        next if $c->[0] == 0 || $c->[0] == 4;
        next if $c->[1] == 0 || $c->[1] == 4;
        push @res, [$c->[0], $c->[1]];
    }
    return @res;
}
# ................................................

# function: find_cards_in_nbh
# searches the board in the neighbourhood for a given owner
# 1 = human, 0 = comp
# returns a list of tupels with the coords
# ................................................
sub find_cards_in_nbh {
    my ($X, $Y) = (shift, shift);
    my $type = shift;
    my @all = get_neighbours($X, $Y);
    my @res;
    for my $c (@all) {
        if ($bm->{$c->[0]}{$c->[1]}{'owner'} eq $type) {
            push @res, [$c->[0], $c->[1]];
        }
    }
    return @res;
}
# ................................................

# function: a2num
# converts the values from the cards to decimal,
# in fact, it does only convert A to 10 ...
# ................................................
sub a2num {
    my $val = shift;
    if ($val eq "A") {
        $val = 10;
    }
    return $val;
}
# ................................................


# function: free_fields
# counts the number of free fields on the board
# ................................................
sub free_fields {
    my $i = 0;
    for my $x (1 .. 3) {
        for my $y (1 .. 3) {
            if ($bm->{$x}{$y}{'owner'} == 2) {
                $i++;
            }
        }
    }
    return $i;
}
# ................................................

# function: set_deck 
# sets the deck of human or comp to a specific value
# ................................................
sub set_deck {
    my ($type, $n, $t, $b, $l, $r, $na, $el) = @_;
    if ($type) { # human deck
        ($d->{$n}{'t'}, $d->{$n}{'b'}, $d->{$n}{'l'}, $d->{$n}{'r'}, $d->{$n}{'n'}) = ($t, $b, $l, $r, $na);
        $d->{$n}{'elem'} = $el;
        $d->{$n}{'played'} = 0;
    }
    else {
        ($o->{$n}{'t'}, $o->{$n}{'b'}, $o->{$n}{'l'}, $o->{$n}{'r'}, $o->{$n}{'n'}) = ($t, $b, $l, $r, $na);
        $o->{$n}{'elem'} = $el;
        $o->{$n}{'played'} = 0;
    }
}

# function: copy_to_board 
# copies the card values from either deck to the board
# ................................................
sub copy_to_board {
    my $ref;
    my ($who, $from, $to_x, $to_y) = @_;
    $who == 1 ? $ref = $d : $ref = $o;
    $bm->{$to_x}{$to_y}{'t'} = $ref->{$from}{'t'};
    $bm->{$to_x}{$to_y}{'b'} = $ref->{$from}{'b'};
    $bm->{$to_x}{$to_y}{'l'} = $ref->{$from}{'l'};
    $bm->{$to_x}{$to_y}{'r'} = $ref->{$from}{'r'};
    if (!defined $bm->{$to_x}{$to_y}{'elem'}) {
        $bm->{$to_x}{$to_y}{'enh'} = 0;
    }
    elsif ($bm->{$to_x}{$to_y}{'elem'} eq $ref->{$from}{'elem'}) {
        $bm->{$to_x}{$to_y}{'enh'} = 1;
    }
    elsif ($bm->{$to_x}{$to_y}{'elem'} ne $ref->{$from}{'elem'}) {
        $bm->{$to_x}{$to_y}{'enh'} = -1;
    }
}

# function: draw_cards 
# refreshes everything
# ................................................
sub draw_cards {
    for my $x (1..3) {
        for my $y (1..3) {
            addstr($bm_w->{"$x,$y"}, 2, 1, $bm->{$x}{$y}{'t'});
            addstr($bm_w->{"$x,$y"}, 2, 3, $bm->{$x}{$y}{'b'});
            addstr($bm_w->{"$x,$y"}, 1, 2, $bm->{$x}{$y}{'l'});
            addstr($bm_w->{"$x,$y"}, 3, 2, $bm->{$x}{$y}{'r'});
            addnstr($bm_w->{"$x,$y"}, 5, 1, $bm->{$x}{$y}{'n'}, 8);
            refresh($bm_w->{"$x,$y"});
        }
    }
    for my $n (1..5) {
        addstr($d_w->{$n}, 2, 1, $d->{$n}{'t'});
        addstr($d_w->{$n}, 2, 3, $d->{$n}{'b'});
        addstr($d_w->{$n}, 1, 2, $d->{$n}{'l'});
        addstr($d_w->{$n}, 3, 2, $d->{$n}{'r'});
        addnstr($d_w->{$n}, 5, 1, $d->{$n}{'n'}, 8);
        refresh($d_w->{$n});
        
        addstr($o_w->{$n}, 2, 1, $o->{$n}{'t'});
        addstr($o_w->{$n}, 2, 3, $o->{$n}{'b'});
        addstr($o_w->{$n}, 1, 2, $o->{$n}{'l'});
        addstr($o_w->{$n}, 3, 2, $o->{$n}{'r'});
        addnstr($o_w->{$n}, 5, 1, $o->{$n}{'n'}, 8);
        refresh($o_w->{$n});
    }
    doupdate();
}

sub focus_card {
    my $num = shift;
    for (1 .. 5) {
        next if $d->{$_}{'played'} == 1;
        bkgd($d_w->{$_}, COLOR_PAIR(7));
    }
    bkgd($d_w->{$num}, COLOR_PAIR(3));
}



# START OF DYNAMIC VARIABLES
# ................................................

# initialize curses

initscr;
clear;
noecho;
start_color;
raw;            # because we want the keys immediately

init_pair(1, COLOR_RED,    COLOR_BLACK); # red on black
init_pair(2, COLOR_BLACK,  COLOR_BLACK); # black on black (invisible)
init_pair(3, COLOR_GREEN,  COLOR_BLACK); # green on black
init_pair(4, COLOR_BLACK,  COLOR_GREEN); # black on green
init_pair(5, COLOR_WHITE,  COLOR_BLACK); # white on black
init_pair(6, COLOR_BLACK,  COLOR_WHITE); # black on white
init_pair(7, COLOR_CYAN,   COLOR_BLACK); # cyan on black
init_pair(8, COLOR_MAGENTA,COLOR_BLACK); # magenta on black

# create the window that are always here (info, score and main)
my $mainwin = newwin(34, 87, 0, 0);
my $infowin = subwin($mainwin, 5, 50, 24, 12);
my $scorewin = subwin($mainwin, 3, 20, 29, 28);
box($infowin, 0,0);
box($scorewin, 0,0);
addstr($scorewin, 1, 7, join " : ", @score);
refresh($mainwin);
refresh($infowin);
refresh($scorewin);


# create the empty structure for the board, we fill it up with
# window coordinates too.

for my $x (1 .. 3) {
    for my $y (1 .. 3) {
        @{$bm->{$x}{$y}{'w_coords'}} = @{$co_b{"$x,$y"}};
        $bm->{$x}{$y}{'owner'} = 2;  # 2 means, belongs to no one 1 = h, 0 = comp
        my $r = $bm->{$x}{$y};       # ref for shorter writing
        ($r->{'t'}, $r->{'r'}, $r->{'b'}, $r->{'l'}) = (0, 0, 0, 0); # top, right, ...
        $r->{'n'} = "";
        $bm_w->{"$x,$y"} = subwin($mainwin, 7, 10, @{$co_b{"$x,$y"}});
        box($bm_w->{"$x,$y"}, 0, 0);
        refresh($bm_w->{"$x,$y"});
    }
}

# set up computer and player deck with random cards

for (1 .. 5) {
    srand();
    my $key = (keys %{$c})[rand keys %{$c}];
    set_deck(1, $_, $c->{$key}{'t'}, $c->{$key}{'b'}, $c->{$key}{'l'}, $c->{$key}{'r'},
             $key, $c->{$key}{'elem'});
    $d_w->{$_} = subwin($mainwin, 7, 10, @{$co_d{$_}});
    box($d_w->{$_}, 0, 0);
    refresh($d_w->{$_});

    srand();
    $key = (keys %{$c})[rand keys %{$c}];
    set_deck(0, $_, $c->{$key}{'t'}, $c->{$key}{'b'}, $c->{$key}{'l'}, $c->{$key}{'r'},
             $key, $c->{$key}{'elem'});
    $o_w->{$_} = subwin($mainwin, 7, 10, @{$co_o{$_}});
    box($o_w->{$_}, 0, 0);
    refresh($o_w->{$_});
}

# check if terminal is big enough
if ($COLS < 87 || $LINES < 34) {
    endwin();
    print "Your terminal window needs to be bigger.\n";
    exit(1);
}
srand;
#my $whosturn = int (rand(2)); # 0 = comp, 1 = human
my $whosturn = 1;
my $cf = 1; # current deck focus

while(1) {
    if (free_fields != 0) {
        if ($whosturn) { # human turn
            draw_cards();
            addstr($infowin, 1,1, "                                ");
            addstr($infowin, 1, 1, "TURN: Player");
            refresh($infowin);
            refresh($scorewin);
            timeout($mainwin, -1);
            my $in = getch($mainwin);

            if ($in eq "q") {
                endwin();
                exit();
            }
            elsif($in eq "p") {
                focus_card($cf);
                my $in = getch($mainwin);
                    if ($in eq "d") {
                        $cf++;
                        focus_card($cf);
                        draw_cards();
                    }

            }

        }
    
    }
}
