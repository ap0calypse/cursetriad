#!/usr/bin/perl
use strict;
use warnings;
use Curses;
use Time::HiRes qw(usleep);
use Data::Dumper;


# name:     triadgame
# author:   Manuel Fill (ap0calypse@agitatio.org)
# purpose:  Remake of the famous triple triad game from final fantasy VIII
# license:  if not specified, it's under GPL

my $cards;
my $cardfile = "./tt_cards.txt";
open my $CF, "< $cardfile" or die "can't open cardfile!";
while (my $line = <$CF>) {
    next if $line =~ m/^#.*/;
    next if $line =~ m/^ *$/;
    if ($line =~ m/^([a-zA-Z0-9 \-\&]+)\[?([a-zA-Z]+)?\]?\/(\d|A?):(\d|A?):(\d|A?):(\d|A?)$/) {
        $cards->{$1}{'elem'} = $2;
        ($cards->{$1}{'u'}, $cards->{$1}{'d'}, $cards->{$1}{'l'}, $cards->{$1}{'r'}) = ($3, $4, $5, $6);
    }
}
close $CF;



initscr;
clear;
noecho;
start_color;
raw;

# check if terminal is big enough
if ($COLS < 87 || $LINES < 34) {
    endwin();
    print "Your terminal window needs to be bigger.\n";
    exit(1);
}

my %coords_to_num = (
    '1' => [1, 22], '2' => [1, 32], '3' => [1, 42], '4' => [8, 22], '5' => [8, 32],
    '6' => [8, 42], '7' => [15, 22], '8' => [15, 32], '9' => [15, 42]
);
my %coords_to_deck = (
    '1' => [1, 53], '2' => [8, 53], '3' => [15, 53], '4' => [1, 63], '5' => [8, 63]
);

my %coords_to_opdeck = (
    '1' => [1, 1], '2' => [8, 1], '3' => [15, 1], '4' => [1, 11], '5' => [8, 11]
);

our $board;

my $deck;
my $opdeck;


my $mainwin = newwin(34, 87, 0, 0);
my $infowin = newwin(5, 50, 24, 12);
box($mainwin, 0,0);
box($infowin, 0,0);

refresh($mainwin);
refresh($infowin);


# fill up the game field with card positions 1 to 9 and the deck positions
# from 1 to 5

for (1 .. 5) {
    $deck->{$_}{'win'} = newwin(7,10, @{$coords_to_deck{$_}});
    $deck->{$_}{'u'} = "";
    $deck->{$_}{'d'} = "";
    $deck->{$_}{'l'} = "";
    $deck->{$_}{'r'} = "";
    $deck->{$_}{'touched'} = 0;
    box($deck->{$_}{'win'}, 0,0);
}

for (1 .. 5) {
    $opdeck->{$_}{'win'} = newwin(7,10, @{$coords_to_opdeck{$_}});
    $opdeck->{$_}{'u'} = "";
    $opdeck->{$_}{'d'} = "";
    $opdeck->{$_}{'l'} = "";
    $opdeck->{$_}{'r'} = "";
    $opdeck->{$_}{'touched'} = 0;
    box($opdeck->{$_}{'win'}, 0,0);
}

for (1 .. 9) {
    $board->{$_}{'win'} = newwin(7,10, @{$coords_to_num{$_}});
    $board->{$_}{'u'} = "";
    $board->{$_}{'d'} = "";
    $board->{$_}{'l'} = "";
    $board->{$_}{'r'} = "";
    $board->{$_}{'touched'} = 0;
    box($board->{$_}{'win'}, 0,0);
}

# func: set_vals
# needs the card number and the values for up, down, left and right

sub set_vals {
    my ($n, $u, $d, $l, $r) = @_;
    $board->{$n}{'u'} =  $u;
    $board->{$n}{'d'} =  $d;
    $board->{$n}{'l'} =  $l;
    $board->{$n}{'r'} =  $r;
}


sub set_dvals {
    my ($n, $u, $d, $l, $r) = @_;
    $deck->{$n}{'u'} =  $u;
    $deck->{$n}{'d'} =  $d;
    $deck->{$n}{'l'} =  $l;
    $deck->{$n}{'r'} =  $r;
}

sub set_ovals {
    my ($n, $u, $d, $l, $r) = @_;
    $opdeck->{$n}{'u'} =  $u;
    $opdeck->{$n}{'d'} =  $d;
    $opdeck->{$n}{'l'} =  $l;
    $opdeck->{$n}{'r'} =  $r;
}


init_pair(1, COLOR_RED, COLOR_BLACK); # red on black
init_pair(2, COLOR_BLACK, COLOR_BLACK); # black on black
init_pair(3, COLOR_GREEN, COLOR_BLACK); # deck cards selected
init_pair(4, COLOR_BLACK, COLOR_GREEN); # urm .. dn
init_pair(5, COLOR_WHITE, COLOR_BLACK); # dn
init_pair(6, COLOR_BLACK, COLOR_WHITE); # dn
init_pair(7, COLOR_CYAN, COLOR_BLACK); # deck cards normal


sub draw_dpics {
    my ($n, $p) = @_;
    if (length $p < 36) {
        return 1;
    }
    my @ar = split //, $p;
    for my $h (0 .. 3) {
        for my $w (0 .. 3) {
            addstr($deck->{$n}{'win'}, 2+$w, 5+$h, $ar[$h*$w+$w]);
        }
    }
}


sub check_played {
    for (1..5) {
        if ($deck->{$_}{'touched'} == 1) {
            addstr($infowin, 3,3, "deleted card $_");
            refresh($infowin);
            delwin($deck->{$_}{'win'});
        }
    }
}


# refresh everything
sub refresh_board {
    for (1..9) { 
        addstr($board->{$_}{'win'}, 1, 2, $board->{$_}{'u'});
        addstr($board->{$_}{'win'}, 3, 2, $board->{$_}{'d'});
        addstr($board->{$_}{'win'}, 2, 1, $board->{$_}{'l'});
        addstr($board->{$_}{'win'}, 2, 3, $board->{$_}{'r'});
        refresh($board->{$_}{'win'});
    }
    for (1..5) {
        next if $deck->{$_}{'touched'} == 1;
        addstr($deck->{$_}{'win'}, 1, 2, $deck->{$_}{'u'});
        addstr($deck->{$_}{'win'}, 3, 2, $deck->{$_}{'d'});
        addstr($deck->{$_}{'win'}, 2, 1, $deck->{$_}{'l'});
        addstr($deck->{$_}{'win'}, 2, 3, $deck->{$_}{'r'});
        draw_dpics($_, "+++++++++++++++++++++++++++++++++++++++++++");
        refresh($deck->{$_}{'win'});
    }
    for (1..5) { 
        next if $opdeck->{$_}{'touched'} == 1;
        addstr($opdeck->{$_}{'win'}, 1, 2, $opdeck->{$_}{'u'});
        addstr($opdeck->{$_}{'win'}, 3, 2, $opdeck->{$_}{'d'});
        addstr($opdeck->{$_}{'win'}, 2, 1, $opdeck->{$_}{'l'});
        addstr($opdeck->{$_}{'win'}, 2, 3, $opdeck->{$_}{'r'});
        refresh($opdeck->{$_}{'win'});
    }
    refresh($mainwin);
    doupdate;
}

sub copy_card {
    my ($from, $to) = @_;
    $board->{$to}{'u'} = $deck->{$from}{'u'};
    $board->{$to}{'d'} = $deck->{$from}{'d'};
    $board->{$to}{'l'} = $deck->{$from}{'l'};
    $board->{$to}{'r'} = $deck->{$from}{'r'};
}

sub copy_ocard {
    my ($from, $to) = @_;
    $board->{$to}{'u'} = $opdeck->{$from}{'u'};
    $board->{$to}{'d'} = $opdeck->{$from}{'d'};
    $board->{$to}{'l'} = $opdeck->{$from}{'l'};
    $board->{$to}{'r'} = $opdeck->{$from}{'r'};
}

# needed! if you delete this, i'll kill you, srsly!

for (1 .. 5) {
    srand();
    my $key = (keys %{$cards})[rand keys %{$cards}];
    set_dvals($_, $cards->{$key}{'u'}, $cards->{$key}{'d'}, $cards->{$key}{'l'}, $cards->{$key}{'r'});
}
for (1 .. 5) {
    srand();
    my $key = (keys %{$cards})[rand keys %{$cards}];
    set_ovals($_, $cards->{$key}{'u'}, $cards->{$key}{'d'}, $cards->{$key}{'l'}, $cards->{$key}{'r'});
}

#draw_dpics(5, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(4, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(3, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(2, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(1, "+++++++++++++++++++++++++++++++++++++++++++");

keypad($mainwin,1);
#timeout($mainwin, 0);
my $i = 0;
my $curfocus = 2;
my $boardfocus = 5;

sub focus_win {
    my ($num, $t) = @_;
    if ($t eq "deck") {
        for (1 .. 5) {
            next if $deck->{$_}{'touched'} == 1;
            bkgd($deck->{$_}{'win'}, COLOR_PAIR(7));
        }
        bkgd($deck->{$num}{'win'}, COLOR_PAIR(3));
    }
    else {
        for (1 .. 9) {
            bkgd($board->{$_}{'win'}, COLOR_PAIR(5));
        }
        bkgd($board->{$num}{'win'}, COLOR_PAIR(1));
    }
}

my $whosturn = 1; # 0 = comp, 1 = human

while(1) {
    if ($whosturn) {
        $i++;
        addstr($infowin, 1, 2, $i);
        refresh($infowin);

        refresh_board();
        usleep(100000);
        my $in = getch($mainwin);

        if ($in eq "q") {
            endwin();
            exit(0);
        }
        if ($in eq KEY_UP) {
            if ($curfocus > 1) {
                $curfocus--;
                if ($deck->{$curfocus}{'touched'} == 0) {
                    focus_win($curfocus, "deck");
                }
                else { 
                    while ($deck->{$curfocus}{'touched'} == 1) {
                        $curfocus--;
                        if ($curfocus == 0) {
                            $curfocus = 5;
                        }
                    }
                    focus_win($curfocus, "deck");
                }
            }
        }
        if ($in eq KEY_DOWN) {
            if ($curfocus < 5) {
                $curfocus++;
                if ($deck->{$curfocus}{'touched'} == 0) {
                    focus_win($curfocus, "deck");
                }
                else {
                    while ($deck->{$curfocus}{'touched'} == 1) {
                        $curfocus++;
                        if ($curfocus == 6) {
                            $curfocus = 1;
                        }
                    }
                    focus_win($curfocus, "deck");
                }
            }
        }
        if ($in eq "p") {
            timeout($mainwin, -1);
            focus_win($boardfocus, "board");
            while (my $blu = getch($mainwin)) {
                if ($blu eq KEY_LEFT) {
                    if ($boardfocus > 1) {
                        $boardfocus--;
                        focus_win($boardfocus, "board");
                    }
                }
                if ($blu eq KEY_RIGHT) {
                    if ($boardfocus < 9) {
                        $boardfocus++;
                        focus_win($boardfocus, "board");
                    }
                }
                if ($blu eq KEY_UP) {
                    if ($boardfocus > 3) {
                        $boardfocus -= 3;
                        focus_win($boardfocus, "board");
                    }
                }
                if ($blu eq KEY_DOWN) {
                    if ($boardfocus < 7) {
                        $boardfocus += 3;
                        focus_win($boardfocus, "board");
                    }
                }
                if ($blu eq ".") {
                    last;
                }
                refresh_board();
            }
            copy_card($curfocus, $boardfocus);
            $deck->{$curfocus}{'touched'} = 1;
            $board->{$boardfocus}{'touched'} = 1;
            check_played();
#        timeout($mainwin, 0);
        }
    }
}
