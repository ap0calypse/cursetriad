#!/usr/bin/perl
use strict;
use warnings;
use Curses;
use Time::HiRes qw(usleep);
use Data::Dumper;


# name:     triadgame
# author:   Manuel Fill (ap0calypse@agitatio.org)
# purpose:  Remake of the famous triple triad game from final fantasy VIII
# license:  if not specified, it's under GPL


# read in all cards from tt_cards.txt. should be 110 card types.
# they are all stored in this hash-reference

my $cards;
my $cardfile = "./tt_cards.txt";
open my $CF, "< $cardfile" or die "can't open cardfile!";
while (my $line = <$CF>) {
    next if $line =~ m/^#.*/ || $line =~ m/^ *$/;
    if ($line =~ m/^([a-zA-Z0-9 \-\&]+)\[?([a-zA-Z]+)?\]?\/(\d|A?):(\d|A?):(\d|A?):(\d|A?)$/) {
        $cards->{$1}{'elem'} = $2;
        ($cards->{$1}{'u'}, $cards->{$1}{'d'}, $cards->{$1}{'l'}, $cards->{$1}{'r'}) = ($3, $4, $5, $6);
    }
}
close $CF;

# initialize curses
initscr;
clear;
noecho;
start_color;
raw;            # because we want the keys immediately

# check if terminal is big enough
if ($COLS < 87 || $LINES < 34) {
    endwin();
    print "Your terminal window needs to be bigger.\n";
    exit(1);
}


my @score = (5,5); # in the beginning it's always like this

my %coords_to_num = (
    '1' => [1, 22], '2' => [1, 32], '3' => [1, 42], '4' => [8, 22], '5' => [8, 32],
    '6' => [8, 42], '7' => [15, 22], '8' => [15, 32], '9' => [15, 42]
);
my %coords_to_deck = (
    '1' => [1, 53], '2' => [8, 53], '3' => [15, 53], '4' => [1, 63], '5' => [8, 63]
);

my %coords_to_opdeck = (
    '1' => [1, 1], '2' => [8, 1], '3' => [15, 1], '4' => [1, 11], '5' => [8, 11]
);

my ($board, $deck, $opdeck);    # playboard, players deck, opponents deck

# create and draw main- and info-window

my $mainwin = newwin(34, 87, 0, 0);
my $infowin = subwin($mainwin, 5, 50, 24, 12);
my $scorewin = subwin($mainwin, 3, 20, 29, 28);
box($mainwin, 0,0);
box($infowin, 0,0);
box($scorewin, 0,0);
addstr($scorewin, 1, 7, join " : ", @score);
refresh($mainwin);
refresh($infowin);
refresh($scorewin);


# fill up the game field with card positions 1 to 9 and the deck positions
# from 1 to 5

for (1 .. 5) {
    $deck->{$_}{'win'} = subwin($mainwin, 7,10, @{$coords_to_deck{$_}});
    $deck->{$_}{'u'} = "";
    $deck->{$_}{'d'} = "";
    $deck->{$_}{'l'} = "";
    $deck->{$_}{'r'} = "";
    $deck->{$_}{'touched'} = 0;
    box($deck->{$_}{'win'}, 0,0);
}

for (1 .. 5) {
    $opdeck->{$_}{'win'} = subwin($mainwin, 7,10, @{$coords_to_opdeck{$_}});
    $opdeck->{$_}{'u'} = "";
    $opdeck->{$_}{'d'} = "";
    $opdeck->{$_}{'l'} = "";
    $opdeck->{$_}{'r'} = "";
    $opdeck->{$_}{'touched'} = 0;
    box($opdeck->{$_}{'win'}, 0,0);
}
my $bm;
my $j;
for my $x (1 .. 3) {
    for my $y (1 .. 3) {
        $j++;
        $board->{$j}{'win'} = subwin($mainwin, 7,10, @{$coords_to_num{$j}});
        $board->{$j}{'u'} = "";
        $board->{$j}{'d'} = "";
        $board->{$j}{'l'} = "";
        $board->{$j}{'r'} = "";
        $board->{$j}{'touched'} = 0;
        $board->{$j}{'owner'} = 0; # space belongs to no one ... when played, this turns into H or C
        box($board->{$j}{'win'}, 0,0);
        $bm->{$x}{$y} = $j;
    }
}

# func: set_vals
# needs the card number and the values for up, down, left and right

sub set_vals {
    my ($n, $u, $d, $l, $r) = @_;
    $board->{$n}{'u'} =  $u;
    $board->{$n}{'d'} =  $d;
    $board->{$n}{'l'} =  $l;
    $board->{$n}{'r'} =  $r;
}


sub set_dvals {
    my ($n, $u, $d, $l, $r) = @_;
    $deck->{$n}{'u'} =  $u;
    $deck->{$n}{'d'} =  $d;
    $deck->{$n}{'l'} =  $l;
    $deck->{$n}{'r'} =  $r;
}

sub set_ovals {
    my ($n, $u, $d, $l, $r) = @_;
    $opdeck->{$n}{'u'} =  $u;
    $opdeck->{$n}{'d'} =  $d;
    $opdeck->{$n}{'l'} =  $l;
    $opdeck->{$n}{'r'} =  $r;
}


init_pair(1, COLOR_RED, COLOR_BLACK); # red on black
init_pair(2, COLOR_BLACK, COLOR_BLACK); # black on black
init_pair(3, COLOR_GREEN, COLOR_BLACK); # deck cards selected
init_pair(4, COLOR_BLACK, COLOR_GREEN); # urm .. dn
init_pair(5, COLOR_WHITE, COLOR_BLACK); # dn
init_pair(6, COLOR_BLACK, COLOR_WHITE); # dn
init_pair(7, COLOR_CYAN, COLOR_BLACK); # deck cards normal


sub draw_dpics {
    my ($n, $p) = @_;
    if (length $p < 36) {
        return 1;
    }
    my @ar = split //, $p;
    for my $h (0 .. 3) {
        for my $w (0 .. 3) {
            addstr($deck->{$n}{'win'}, 2+$w, 5+$h, $ar[$h*$w+$w]);
        }
    }
}


sub check_played {
    for (1..5) {
        if ($deck->{$_}{'touched'} == 1) {
            addstr($infowin, 3,3, "deleted card $_");
            refresh($infowin);
            delwin($deck->{$_}{'win'});
        }
    }
}


# refresh everything
sub refresh_board {
    for (1..9) {
        if ($board->{$_}{'owner'} eq "H") {
            bkgd($board->{$_}{'win'}, COLOR_PAIR(3));
        }
        elsif ($board->{$_}{'owner'} eq "C") {
            bkgd($board->{$_}{'win'}, COLOR_PAIR(1));
        }
        addstr($board->{$_}{'win'}, 1, 2, $board->{$_}{'u'});
        addstr($board->{$_}{'win'}, 3, 2, $board->{$_}{'d'});
        addstr($board->{$_}{'win'}, 2, 1, $board->{$_}{'l'});
        addstr($board->{$_}{'win'}, 2, 3, $board->{$_}{'r'});
        refresh($board->{$_}{'win'});
    }
    for (1..5) {
        bkgd($deck->{$_}{'win'}, COLOR_PAIR(2)) if $deck->{$_}{'touched'} == 1;
        addstr($deck->{$_}{'win'}, 1, 2, $deck->{$_}{'u'});
        addstr($deck->{$_}{'win'}, 3, 2, $deck->{$_}{'d'});
        addstr($deck->{$_}{'win'}, 2, 1, $deck->{$_}{'l'});
        addstr($deck->{$_}{'win'}, 2, 3, $deck->{$_}{'r'});
        draw_dpics($_, "+++++++++++++++++++++++++++++++++++++++++++");
        refresh($deck->{$_}{'win'});
    }
    for (1..5) { 
        bkgd($opdeck->{$_}{'win'}, COLOR_PAIR(2)) if $opdeck->{$_}{'touched'} == 1;
        addstr($opdeck->{$_}{'win'}, 1, 2, $opdeck->{$_}{'u'});
        addstr($opdeck->{$_}{'win'}, 3, 2, $opdeck->{$_}{'d'});
        addstr($opdeck->{$_}{'win'}, 2, 1, $opdeck->{$_}{'l'});
        addstr($opdeck->{$_}{'win'}, 2, 3, $opdeck->{$_}{'r'});
        refresh($opdeck->{$_}{'win'});
    }
    refresh($mainwin);
    doupdate;
}

sub copy_card {
    my ($from, $to) = @_;
    overwrite($deck->{$from}{'win'}, $board->{$to}{'win'});
    $board->{$to}{'u'} = $deck->{$from}{'u'};
    $board->{$to}{'d'} = $deck->{$from}{'d'};
    $board->{$to}{'l'} = $deck->{$from}{'l'};
    $board->{$to}{'r'} = $deck->{$from}{'r'};
}

sub copy_ocard {
    my ($from, $to) = @_;
    $board->{$to}{'u'} = $opdeck->{$from}{'u'};
    $board->{$to}{'d'} = $opdeck->{$from}{'d'};
    $board->{$to}{'l'} = $opdeck->{$from}{'l'};
    $board->{$to}{'r'} = $opdeck->{$from}{'r'};
}

# needed! if you delete this, i'll kill you, srsly!

for (1 .. 5) {
    srand();
    my $key = (keys %{$cards})[rand keys %{$cards}];
    set_dvals($_, $cards->{$key}{'u'}, $cards->{$key}{'d'}, $cards->{$key}{'l'}, $cards->{$key}{'r'});
}
for (1 .. 5) {
    srand();
    my $key = (keys %{$cards})[rand keys %{$cards}];
    set_ovals($_, $cards->{$key}{'u'}, $cards->{$key}{'d'}, $cards->{$key}{'l'}, $cards->{$key}{'r'});
}

#draw_dpics(5, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(4, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(3, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(2, "+++++++++++++++++++++++++++++++++++++++++++");
#draw_dpics(1, "+++++++++++++++++++++++++++++++++++++++++++");

keypad($mainwin,1);
#timeout($mainwin, 0);
my $i = 0;
my $curfocus = 2;
my $boardfocus = 5;

sub focus_win {
    my ($num, $t) = @_;
    if ($t eq "deck") {
        for (1 .. 5) {
            next if $deck->{$_}{'touched'} == 1;
            bkgd($deck->{$_}{'win'}, COLOR_PAIR(7));
        }
        bkgd($deck->{$num}{'win'}, COLOR_PAIR(3));
    }
    else {
        for (1 .. 9) {
            bkgd($board->{$_}{'win'}, COLOR_PAIR(5));
        }
        bkgd($board->{$num}{'win'}, COLOR_PAIR(3));
    }
}
srand;
my $whosturn = int (rand(2)); # 0 = comp, 1 = human

sub numconv {
    my $val = shift;
    if ($val eq "A") {
        $val = 10;
    }
    return $val;
}

sub upd_score {
    addstr($scorewin, 1, 7, "$i - " . join " : ", @score);
}

sub playable_fields {
    my $i = 0;
    for (1..9) {
        if ($board->{$_}{'owner'} ne "C" && $board->{$_}{'owner'} ne "H") {
            $i++;
        }
    }
    return $i;
}


while(1) {

    if (playable_fields == 0) {
        my $endwin = subwin($mainwin, 15, 50, 10, 12);
        box($endwin, 0,0);
        if ($score[0] > $score[1]) {
            addstr($endwin, 2,2, "you lost");
        }
        elsif ($score[0] < $score[1]) {
            addstr($endwin, 2,2, "you won");
        }
        else {
            addstr($endwin, 2,2, "draw");
        }
        addstr($endwin, 3,2, "please press any key to quit");
        overwrite($endwin, $mainwin);
        refresh($endwin);
        my $gna = getch($mainwin);
        endwin();
        exit(0);
    }

        
    if ($whosturn) {
        addstr($infowin, 1,1, "                                ");
        addstr($infowin, 1, 1, "TURN: Player");
        refresh($infowin);
        refresh($scorewin);
        refresh_board();
        timeout($mainwin, -1);
        my $in = getch($mainwin);

        if ($in eq "q") {
            endwin();
            exit(0);
        }
        if ($in eq KEY_UP) {
            if ($curfocus > 1) {
                $curfocus--;
                if ($deck->{$curfocus}{'touched'} == 0) {
                    focus_win($curfocus, "deck");
                }
                else { 
                    while ($deck->{$curfocus}{'touched'} == 1) {
                        $curfocus--;
                        if ($curfocus == 0) {
                            $curfocus = 5;
                        }
                    }
                    focus_win($curfocus, "deck");
                }
            }
        }
        if ($in eq KEY_DOWN) {
            if ($curfocus < 5) {
                $curfocus++;
                if ($deck->{$curfocus}{'touched'} == 0) {
                    focus_win($curfocus, "deck");
                }
                else {
                    while ($deck->{$curfocus}{'touched'} == 1) {
                        $curfocus++;
                        if ($curfocus == 6) {
                            $curfocus = 1;
                        }
                    }
                    focus_win($curfocus, "deck");
                }
            }
        }
        if ($in eq "p") {
            timeout($mainwin, -1);
            focus_win($boardfocus, "board");
            while (my $blu = getch($mainwin)) {
                if ($blu eq KEY_LEFT) {
                    if ($boardfocus > 1) {
                        $boardfocus--;
                        if ($board->{$boardfocus}{'touched'} == 0) {
                            focus_win($boardfocus, "board");
                        }
                        else { 
                            while ($board->{$boardfocus}{'touched'} == 1) {
                                $boardfocus--;
                                    if ($boardfocus == 0) {
                                        $boardfocus = 9;
                                    }
                            }
                            focus_win($boardfocus, "board");
                        }
                    }
                }
                if ($blu eq KEY_RIGHT) {
                    if ($boardfocus < 9) {
                        $boardfocus++;
                        if ($board->{$boardfocus}{'touched'} == 0) {
                            focus_win($boardfocus, "board");
                        }
                        else { 
                            while ($board->{$boardfocus}{'touched'} == 1) {
                                $boardfocus++;
                                    if ($boardfocus == 10) {
                                        $boardfocus = 1;
                                    }
                            }
                            focus_win($boardfocus, "board");
                        }
                    }
                }
                if ($blu eq ".") {
                    last;
                }
                refresh_board();
            }
            copy_card($curfocus, $boardfocus);
            $deck->{$curfocus}{'touched'} = 1;
            $board->{$boardfocus}{'touched'} = 1;
            $board->{$boardfocus}{'owner'} = "H";
            my @turnlist;
            if ($boardfocus % 3 == 2) { # we aren't on the borders
                if (defined $board->{$boardfocus - 1} && $board->{$boardfocus - 1}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus - 1}{'r'}) < numconv($deck->{$curfocus}{'l'})) {
                        push @turnlist, $boardfocus - 1;
                    }
                }
                if (defined $board->{$boardfocus + 1} && $board->{$boardfocus + 1}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus + 1}{'l'}) < numconv($deck->{$curfocus}{'r'})) {
                        push @turnlist, $boardfocus + 1;
                    }
                }
                if (defined $board->{$boardfocus - 3} && $board->{$boardfocus - 3}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus - 3}{'d'}) < numconv($deck->{$curfocus}{'u'})) {
                        push @turnlist, $boardfocus - 3;
                    }
                }
                if (defined $board->{$boardfocus + 3} && $board->{$boardfocus + 3}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus + 3}{'u'}) < numconv($deck->{$curfocus}{'d'})) {
                        push @turnlist, $boardfocus + 3;
                    }
                }
            }
            elsif ($boardfocus % 3 == 1) {
                if (defined $board->{$boardfocus + 1} && $board->{$boardfocus + 1}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus + 1}{'l'}) < numconv($deck->{$curfocus}{'r'})) {
                        push @turnlist, $boardfocus + 1;
                    }
                }
                if (defined $board->{$boardfocus - 3} && $board->{$boardfocus - 3}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus - 3}{'d'}) < numconv($deck->{$curfocus}{'u'})) {
                        push @turnlist, $boardfocus - 3;
                    }
                }
                if (defined $board->{$boardfocus + 3} && $board->{$boardfocus + 3}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus + 3}{'u'}) < numconv($deck->{$curfocus}{'d'})) {
                        push @turnlist, $boardfocus + 3;
                    }
                }
            }
            elsif ($boardfocus % 3 == 0) { #right border
                if (defined $board->{$boardfocus - 1} && $board->{$boardfocus - 1}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus - 1}{'r'}) < numconv($deck->{$curfocus}{'l'})) {
                        push @turnlist, $boardfocus - 1;
                    }
                }
                if (defined $board->{$boardfocus - 3} && $board->{$boardfocus - 3}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus - 3}{'d'}) < numconv($deck->{$curfocus}{'u'})) {
                        push @turnlist, $boardfocus - 3;
                    }
                }
                if (defined $board->{$boardfocus + 3} && $board->{$boardfocus + 3}{'owner'} eq "C") { # check if we can beat it
                    if (numconv($board->{$boardfocus + 3}{'u'}) < numconv($deck->{$curfocus}{'d'})) {
                        push @turnlist, $boardfocus + 3;
                    }
                }
            }


            for (@turnlist) {
                $board->{$_}{'owner'} = "H";
                $score[1]++;
                $score[0]--;
            }
            upd_score();

            $whosturn = 0; # now it's comps choice
        }
    }
    else {
        refresh_board();
        addstr($infowin, 1,1, "                                ");
        addstr($infowin, 1,1, "TURN: Computer");
        refresh($infowin);
        refresh($scorewin);
        my $c_h; # calc hash
        for my $p (1..9) {
            next if ($board->{$p}{'owner'} eq "H" || $board->{$p}{'owner'} eq "C");
            for my $c (1..5) {
                next if ($opdeck->{$c}{'touched'} == 1);

                for (split //, "udlr") {  # berechnung der points
                    if ($opdeck->{$c}{$_} eq 'A') {
                        $c_h->{$p}{$c}{'points'} += 10;
                    }
                    else {
                        $c_h->{$p}{$c}{'points'} += $opdeck->{$c}{$_};
                    }
            }

            $c_h->{$p}{$c}{'epoints'}  = 0;
            if ($p % 3 == 2 || $p % 3 == 0) { # we aren't on the left border
                if ($p - 1 <= 0 || $board->{$p - 1}{'owner'}) { # left edge is blocked
                    if ($opdeck->{$c}{'l'} eq "A") {
                        $c_h->{$p}{$c}{'epoints'} += 10;
                    }
                    else {
                        $c_h->{$p}{$c}{'epoints'} += $opdeck->{$c}{'l'};
                    }
                    if (defined $board->{$p - 1} && $board->{$p - 1}{'owner'} eq "H") { # check if we can beat it
                        if (numconv($board->{$p - 1}{'r'}) < numconv($opdeck->{$c}{'l'})) {
                            $c_h->{$p}{$c}{'turns'} += 10;
                            push @{$c_h->{$p}{$c}{'turnlist'}}, $p - 1;
                        }
                    }
                }
            }
            if ($p - 3 <= 0 || $board->{$p - 3}{'owner'}) { # top edge is blocked
                if ($opdeck->{$c}{'u'} eq "A") {
                    $c_h->{$p}{$c}{'epoints'} += 10;
                }
                else {
                    $c_h->{$p}{$c}{'epoints'} += $opdeck->{$c}{'u'};
                }
                if (defined $board->{$p - 3} && $board->{$p - 3}{'owner'} eq "H") { # check if we can beat it
                    if (numconv($board->{$p - 3}{'d'}) < numconv($opdeck->{$c}{'u'})) {
                        $c_h->{$p}{$c}{'turns'} += 10;
                        push @{$c_h->{$p}{$c}{'turnlist'}}, $p - 3;
                    }
                }
            }
            if ($p + 3 >= 10 || $board->{$p + 3}{'owner'}) { # bottom edge is blocked
                if ($opdeck->{$c}{'d'} eq "A") {
                    $c_h->{$p}{$c}{'epoints'} += 10;
                }
                else {
                    $c_h->{$p}{$c}{'epoints'} += $opdeck->{$c}{'d'};
                }
                if (defined $board->{$p + 3} && $board->{$p + 3}{'owner'} eq "H") { # check if we can beat it
                    if (numconv($board->{$p + 3}{'u'}) < numconv($opdeck->{$c}{'d'})) {
                        $c_h->{$p}{$c}{'turns'} += 10;
                        push @{$c_h->{$p}{$c}{'turnlist'}}, $p + 3;
                    }
                }
            }
            if ($p % 3 == 2 || $p % 3 == 1) { # we aren't on the right border
                if ($p + 1 >= 10 || $board->{$p + 1}{'owner'}) { # right edge is blocked
                    if ($opdeck->{$c}{'r'} eq "A") {
                        $c_h->{$p}{$c}{'epoints'} += 10;
                    }
                    else {
                        $c_h->{$p}{$c}{'epoints'} += $opdeck->{$c}{'r'};
                    }
                    if (defined $board->{$p + 1} && $board->{$p + 1}{'owner'} eq "H") { # check if we can beat it
                        if (numconv($board->{$p + 1}{'l'}) < numconv($opdeck->{$c}{'r'})) {
                            $c_h->{$p}{$c}{'turns'} += 10;
                            push @{$c_h->{$p}{$c}{'turnlist'}}, $p + 1;
                        }
                    }
                }
            }

            $c_h->{$p}{$c}{'turns'} += 10;
            $c_h->{$p}{$c}{'points'}++;
            $c_h->{$p}{$c}{'points'}++;
            $c_h->{$p}{$c}{'epoints'}++;
            $c_h->{$p}{$c}{'maxdmg'} = sprintf("%.10f", $c_h->{$p}{$c}{'turns'} / $c_h->{$p}{$c}{'points'});
            my $mult = sprintf("%.10f", $c_h->{$p}{$c}{'points'} - $c_h->{$p}{$c}{'epoints'});
            $c_h->{$p}{$c}{'maxdmg'} *= $mult;
            addstr($infowin, 1,1,"                               ");
            addstr($infowin, 1,1,"TURN: Computer");
            addstr($infowin, 2,1,"                                   ");
            addstr($infowin, 2,1, "Card $c in position $p: $c_h->{$p}{$c}{'turns'} / ($c_h->{$p}{$c}{'points'} * ( $c_h->{$p}{$c}{'points'} - ($c_h->{$p}{$c}{'epoints'})");
            addstr($infowin, 3,1,"                                   ");
            addstr($infowin, 3,1,"$c_h->{$p}{$c}{'maxdmg'}");
            refresh($infowin);
            usleep(500000);

            }
        }
        my ($cn, $pn, $max) = (0, 0, 0);
        for my $p(keys %{$c_h}) {
            for my $c(keys %{$c_h->{$p}}) {
                if ($c_h->{$p}{$c}{'maxdmg'} > $max) {
                    $max = $c_h->{$p}{$c}{'maxdmg'};
                    $cn = $c;
                    $pn = $p;
                }
            }
        }
        addstr($infowin, 3,1,"                                        ");
        addstr($infowin, 3,1,"BEST TRY with $c_h->{$pn}{$cn}{'maxdmg'}, card $cn on position $pn");
        refresh($infowin);
        usleep(2000000);
        copy_ocard($cn, $pn);
        $opdeck->{$cn}{'touched'} = 1;
        $board->{$pn}{'touched'} = 1;
        $board->{$pn}{'owner'} = "C";
        for (@{$c_h->{$pn}{$cn}{'turnlist'}}) {
            $board->{$_}{'owner'} = "C";
            $score[0]++;
            $score[1]--;
        }
        upd_score();
        $whosturn = 1;
    }
}
